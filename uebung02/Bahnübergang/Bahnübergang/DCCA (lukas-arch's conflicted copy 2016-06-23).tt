<#@ template inherits="Safety.ProgramGraphDsl.ProgramGraphTransformation" hostspecific="true" #>
<#@ output encoding="us-ascii" extension=".smv" #>
<#@ assembly Name="Safety.ProgramGraphDsl.dll" #>

<#=  TransformToNuSMV() #>

-- ****DEFINITIONS***

DEFINE noFaults := v.V_FailureBrakes = L_FailureBrakesNo
				 & v.V_FailureSMotor = L_FailureSMotorNo
				 & v.V_FaultHodometerPos = L_FaultHodometerPosNo
				 & v.V_FaultHodometerSpeed = L_FaultHodometerSpeedNo
				 & v.V_FaultSecured = L_FaultSecuredNo
				 & v.V_FaultSensor = L_FaultSensorNo
				 & v.V_FaultTimer = L_FaultTimerNo;

DEFINE SP := 100;
DEFINE GP := 95;

DEFINE hazard := (v.V_Position >= GP & v.V_Position < SP & v.V_SchrankenWinkel != 0);

-- MINIMAL KRITISCHE MENGEN:
-- {hodometerPos}
DEFINE onlyFaultHodoPos := v.V_FailureBrakes = L_FailureBrakesNo
				 & v.V_FailureSMotor = L_FailureSMotorNo
				 & v.V_FaultHodometerSpeed = L_FaultHodometerSpeedNo
				 & v.V_FaultSecured = L_FaultSecuredNo
				 & v.V_FaultSensor = L_FaultSensorNo
				 & v.V_FaultTimer = L_FaultTimerNo;

-- {hodometerSpeed}
DEFINE onlyFaultHodoSpeed := v.V_FailureBrakes = L_FailureBrakesNo
				 & v.V_FailureSMotor = L_FailureSMotorNo
				 & v.V_FaultHodometerPos = L_FaultHodometerPosNo
				 & v.V_FaultSecured = L_FaultSecuredNo
				 & v.V_FaultSensor = L_FaultSensorNo
				 & v.V_FaultTimer = L_FaultTimerNo;

-- {FaultSecured}
DEFINE onlyFaultSecured := v.V_FailureBrakes = L_FailureBrakesNo
				 & v.V_FailureSMotor = L_FailureSMotorNo
				 & v.V_FaultHodometerPos = L_FaultHodometerPosNo
				 & v.V_FaultHodometerSpeed = L_FaultHodometerSpeedNo
				 & v.V_FaultSensor = L_FaultSensorNo
				 & v.V_FaultTimer = L_FaultTimerNo;

-- {FaultSensor}
DEFINE onlyFaultSensor := v.V_FailureBrakes = L_FailureBrakesNo
				 & v.V_FailureSMotor = L_FailureSMotorNo
				 & v.V_FaultHodometerPos = L_FaultHodometerPosNo
				 & v.V_FaultHodometerSpeed = L_FaultHodometerSpeedNo
				 & v.V_FaultSecured = L_FaultSecuredNo
				 & v.V_FaultTimer = L_FaultTimerNo;

-- {FaultTimer}
DEFINE onlyFaultTimer := v.V_FailureBrakes = L_FailureBrakesNo
				 & v.V_FailureSMotor = L_FailureSMotorNo
				 & v.V_FaultHodometerPos = L_FaultHodometerPosNo
				 & v.V_FaultHodometerSpeed = L_FaultHodometerSpeedNo
				 & v.V_FaultSecured = L_FaultSecuredNo
				 & v.V_FaultSensor = L_FaultSensorNo;

-- {FailureBrakes,FailureSMotor}
DEFINE failureBrakesAndSMotor := 
				   v.V_FaultHodometerPos = L_FaultHodometerPosNo
				 & v.V_FaultHodometerSpeed = L_FaultHodometerSpeedNo
				 & v.V_FaultSecured = L_FaultSecuredNo
				 & v.V_FaultSensor = L_FaultSensorNo
				 & v.V_FaultTimer = L_FaultTimerNo;


-- Sanity check: Ohne faults geht alles gut!
LTLSPEC (G noFaults) -> (G !hazard);

-- TODO: Diese Formel ist falsch, das zeigt, dass HodoSpeed alleine ausreicht,
-- um den Hazard auszulösen. Aus irgendeinem Grund ist die korrespondierende
-- CTL-Formel trotzdem falsch.

-- LTLSPEC (G onlyFaultHodoSpeed) -> (G !hazard);

-- Single points of failure reichen um alles kaputt zu machen
CTLSPEC E [ onlyFaultSecured U hazard];
CTLSPEC E [ onlyFaultSensor U hazard];
CTLSPEC E [ onlyFaultTimer U hazard];
CTLSPEC E [ onlyFaultHodoPos U hazard];
CTLSPEC E [ onlyFaultHodoSpeed U hazard];

-- FailureBrakes und FailureSMotor müssen zusammen auftreten
CTLSPEC E [ failureBrakesAndSMotor U hazard];
