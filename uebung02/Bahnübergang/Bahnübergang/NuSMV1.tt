<#@ template inherits="Safety.ProgramGraphDsl.ProgramGraphTransformation" hostspecific="true" #>
<#@ output encoding="us-ascii" extension=".smv" #>
<#@ assembly Name="Safety.ProgramGraphDsl.dll" #>

<#=  TransformToNuSMV() #>

-- ****DEFINITIONS***

DEFINE noFaults := v.V_FailureBrakes = L_FailureBrakesNo
				 & v.V_FailureSMotor = L_FailureSMotorNo
				 & v.V_FaultHodometerPos = L_FaultHodometerPosNo
				 & v.V_FaultHodometerSpeed = L_FaultHodometerSpeedNo
				 & v.V_FaultSecured = L_FaultSecuredNo
				 & v.V_FaultSensor = L_FaultSensorNo
				 & v.V_FaultTimer = L_FaultTimerNo;

DEFINE SP := 100;
DEFINE GP := 95;

-- ****SOLLVERHALTEN****

-- WICHTIGSTE EIGENSCHAFT

-- Der Zug ist niemals auf einem ungesichertem Bahnübergang
LTLSPEC (G noFaults) -> (G (v.V_Position >= GP & v.V_Position < SP -> v.V_SAnschlagssensor = L_SchrankeUnten));
LTLSPEC (G noFaults) -> (G (v.V_Position >= GP & v.V_Position < SP -> v.V_SchrankenWinkel = 0));


-- EIGENSCHAFTEN ÜBERGANG

-- Wenn der Übergang die Sicherungsnachricht erhält, ist er irgendwann auch gesichert
LTLSPEC (G noFaults) -> (G v.V_KanalZuUeb = L_BitteSichern -> (F v.V_SAnschlagssensor = L_SchrankeUnten));
LTLSPEC (G noFaults) -> (G v.V_KanalZuUeb = L_BitteSichern -> (F v.V_SchrankenWinkel = 0));

-- Wenn der Bahnübergang meldet, er sei gesichert, dann ist auch die Schranke unten
LTLSPEC (G noFaults) -> (G (v.V_KommEinheitUebergang = L_Gesichert -> v.V_SAnschlagssensor = L_SchrankeUnten));
LTLSPEC (G noFaults) -> (G (v.V_KommEinheitUebergang = L_Gesichert -> v.V_SchrankenWinkel = 0));

-- Wenn die Schranke unten ist, ist der Übergang im nächsten(!) Schritt (wegen Verzögerung) gesichert
-- oder er war schon gesichert und öffent sich wieder
LTLSPEC (G noFaults) -> (G (v.V_SAnschlagssensor = L_SchrankeUnten -> X (v.V_KommEinheitUebergang = L_Gesichert | v.V_KommEinheitUebergang = L_Oeffne)));

-- Der Zug erhält die Sicherungsbestätigung, wenn er sie denn erhält, zumindest einmal vor dem Gefahrenpunkt
LTLSPEC (G noFaults) -> (F (v.V_KanalZuZug = L_IstGesichert -> v.V_Position < GP));

-- Am Ende öffnet sich der Übergang immer
LTLSPEC (G noFaults) -> (F v.V_KommEinheitUebergang = L_Oeffne);

-- Die Schranke ist erst offen, dann geschlossen (wenn Zug Sicherung erfrägt) und am Ende auf jeden Fall wieder offen
LTLSPEC (G noFaults) -> 
		 (G ( v.V_SAnschlagssensor = L_SchrankeOben  U
		 ( v.V_SAnschlagssensor = L_KeinKontakt U
		 (	v.V_SAnschlagssensor = L_SchrankeUnten U
		 ( v.V_SAnschlagssensor = L_KeinKontakt U
		    (v.V_SAnschlagssensor = L_SchrankeOben & v.V_Position > 100))))));

-- Wenn sich die Schranke öffnet, ist der Zug hinter dem Gefahrenpunkt oder der Timer ist abgelaufen
LTLSPEC (G noFaults) -> (G ((v.V_SAnschlagssensor = L_SchrankeUnten & X v.V_SAnschlagssensor = L_KeinKontakt) -> (v.V_Countdown = 0 | v.V_Position > SP)));



-- EIGENSCHAFTEN ZUG

-- Der Zug überfährt immer den Überfahrtsensor und ist davor nie stehen geblieben
LTLSPEC (G noFaults) -> (G ( v.V_Geschwindigkeit > 0 U v.V_SUeberfahrtSensor = L_UeberfahrtZu));
LTLSPEC (G noFaults) -> (G ( v.V_Geschwindigkeit > 0 U v.V_Position > SP));

-- Der Zug ist irgendwann immer hinter dem Gefahrenpunkt
LTLSPEC (G noFaults) -> (F v.V_Position > SP);

-- Wenn der Zug bremst, kommt er irgendwann auch zum Stehen
LTLSPEC (G noFaults) -> (G (v.V_Zugnotbremse = L_NotbremseEin -> (F v.V_Geschwindigkeit = 0)));


-- ****ADÄQUATHEIT DER FEHLER****

-- FailureBreaks
-- Es gibt einen Trace indem der Zug nicht anhält obwohl die Notbremse auslöst