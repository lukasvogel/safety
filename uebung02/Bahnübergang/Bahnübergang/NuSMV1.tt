<#@ template inherits="Safety.ProgramGraphDsl.ProgramGraphTransformation" hostspecific="true" #>
<#@ output encoding="us-ascii" extension=".smv" #>
<#@ assembly Name="Safety.ProgramGraphDsl.dll" #>

<#=  TransformToNuSMV() #>

-- ****DEFINITIONS***

DEFINE noFaults := v.V_FailureBrakes = L_No
				 & v.V_FailureSMotor = L_No
				 & v.V_FaultHodometerPos = L_No
				 & v.V_FaultHodometerSpeed = L_No
				 & v.V_FaultSecured = L_No
				 & v.V_FaultSensor = L_No
				 & v.V_FaultTimer = L_No;

DEFINE SP := 100;
DEFINE GP := 95;

-- ****SOLLVERHALTEN**** 

-- WICHTIGSTE EIGENSCHAFT

-- Der Zug ist niemals auf einem ungesichertem Bahnübergang
LTLSPEC (G noFaults) -> (G (v.V_Position >= GP & v.V_Position < SP -> v.V_SAnschlagssensor = L_SchrankeUnten));
LTLSPEC (G noFaults) -> (G (v.V_Position >= GP & v.V_Position < SP -> v.V_SchrankenWinkel = 0));


-- EIGENSCHAFTEN ÜBERGANG

-- Wenn der Übergang die Sicherungsnachricht erhält, ist er irgendwann auch gesichert
LTLSPEC (G noFaults) -> (G v.V_KanalZuUeb = L_BitteSichern -> (F v.V_SAnschlagssensor = L_SchrankeUnten));
LTLSPEC (G noFaults) -> (G v.V_KanalZuUeb = L_BitteSichern -> (F v.V_SchrankenWinkel = 0));

-- Wenn der Bahnübergang meldet, er sei gesichert, dann ist auch die Schranke unten
LTLSPEC (G noFaults) -> (G (v.V_KommEinheitUebergang = L_Gesichert -> v.V_SAnschlagssensor = L_SchrankeUnten));
LTLSPEC (G noFaults) -> (G (v.V_KommEinheitUebergang = L_Gesichert -> v.V_SchrankenWinkel = 0));

-- Wenn die Schranke unten ist, ist der Übergang im nächsten(!) Schritt (wegen Verzögerung) gesichert
-- oder er war schon gesichert und öffent sich wieder
LTLSPEC (G noFaults) -> (G (v.V_SAnschlagssensor = L_SchrankeUnten -> X (v.V_KommEinheitUebergang = L_Gesichert | v.V_KommEinheitUebergang = L_Oeffne)));

-- Der Zug erhält die Sicherungsbestätigung, wenn er sie denn erhält, zumindest einmal vor dem Gefahrenpunkt
LTLSPEC (G noFaults) -> (F (v.V_KanalZuZug = L_IstGesichert -> v.V_Position < GP));

-- Am Ende öffnet sich der Übergang immer
LTLSPEC (G noFaults) -> (F v.V_KommEinheitUebergang = L_Oeffne);

-- Wenn sich die Schranke öffnet, ist der Zug hinter dem Gefahrenpunkt oder der Timer ist abgelaufen
LTLSPEC (G noFaults) -> (G ((v.V_SAnschlagssensor = L_SchrankeUnten & X v.V_SAnschlagssensor = L_KeinKontakt) -> (v.V_Countdown = 0 | v.V_Position > SP)));



-- EIGENSCHAFTEN ZUG

-- Der Zug überfährt immer den Überfahrtsensor und ist davor nie stehen geblieben
LTLSPEC (G noFaults) -> (G ( v.V_Geschwindigkeit > 0 U v.V_UeberfahrtSensor = L_Zu));
LTLSPEC (G noFaults) -> (G ( v.V_Geschwindigkeit > 0 U v.V_Position > SP));

-- Der Zug ist irgendwann immer hinter dem Gefahrenpunkt
LTLSPEC (G noFaults) -> (F v.V_Position > SP);

-- Wenn der Zug bremst, kommt er irgendwann auch zum Stehen
LTLSPEC (G noFaults) -> (G (v.V_Notbremse = L_Ein -> (F v.V_Geschwindigkeit = 0)));


-- ****ADÄQUATHEIT DER FEHLER****

--- FaultHodometerPos
-- Wenn die Positionsbestimmung des Hodometers fehlschlägt, ist danach die tatsächliche Position größer als die gemeldete
LTLSPEC G ((v.V_FaultHodometerPos != L_No & v.V_Position < 100) -> X (v.V_Position > v.V_ReportedPosition));

--- FaultHodometerSpeed
-- Wenn die Geschwindigkeitsanzeige falsche Werte liefert, ist die gemessene Geschwindigkeit im nächsten Schritt immer 1
LTLSPEC G (v.V_FaultHodometerSpeed != L_No & v.V_Position <= 115 -> X v.V_ReportedSpeed = 1);

--- FailureSMotor
-- Wenn der Schrankenmotor versagt, während die Schranke offen ist, geht sie nie zu
LTLSPEC (v.V_SchrankenWinkel = 90 U v.V_FailureSMotor != L_No) -> G v.V_SchrankenWinkel != 0;

-- FailureBrakes
-- Wenn die Bremsen irgendwann versagen während der Zug fährt, hält der Zug niemals an
LTLSPEC (F v.V_FailureBrakes != L_No & G v.V_Geschwindigkeit > 0) -> G v.V_Geschwindigkeit != 0;

-- FaultSensor
-- Obwohl der Zug noch vor dem Sensorpunkt ist, meldet der Sensor manchmal schon eine Überfahrt
CTLSPEC EF (v.V_Position < SP & v.V_UeberfahrtSensor = L_Zu);

-- FaultTimer
-- Der Timer triggered in manchen Pfaden bevor der Zug überhaupt am Gefahrenpunkt ist, obwohl er nicht abgebremst hat
CTLSPEC EF (v.V_FaultTimer != L_No & v.V_Position < GP & v.V_Geschwindigkeit > 0 & v.V_Timer = L_Triggered);

-- FaultSecured
-- Es gibt mindestens einen Pfad, indem der Übergang meldet, er sei gesichert, obwohl die Schranke nicht unten ist
CTLSPEC EF (v.V_KanalZuZug = L_IstGesichert & v.V_SchrankenWinkel != 0);